{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\sy-mi\\src\\components\\home\\Tele.vue?vue&type=template&id=dcfbfbcc&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\sy-mi\\src\\components\\home\\Tele.vue","mtime":1601015968320},{"path":"C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\sy-mi\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}